# GitHub Repository Structure for Travel Router & NAS Project
# This includes GitHub Actions workflows, repository structure, and configuration files

# .github/workflows/main.yml - Main CI/CD Pipeline
name: Travel Router & NAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Code Formatting Check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: Run Linting
        run: |
          flake8 .
          pylint **/*.py --exit-zero

      - name: Run Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json
          safety check

      - name: Run Tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # Job 2: Documentation Build and Deploy
  documentation:
    runs-on: ubuntu-latest
    name: Build Documentation
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Documentation Dependencies
        run: |
          npm install -g @gitbook/cli
          pip install mkdocs mkdocs-material

      - name: Build Documentation
        run: |
          mkdocs build --clean
          
      - name: Deploy Documentation to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Job 3: Container Image Build and Push
  container-build:
    runs-on: ubuntu-latest
    name: Build Container Images
    needs: code-quality
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and Push CasaOS Config Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/casaos
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Setup Scripts Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/setup-scripts
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/setup-scripts:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Hardware Testing Simulation
  hardware-simulation:
    runs-on: ubuntu-latest
    name: Hardware Configuration Testing
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Run Network Configuration Tests
        run: |
          python -m pytest tests/network/ -v
          
      - name: Run Storage Configuration Tests
        run: |
          python -m pytest tests/storage/ -v

      - name: Run Service Integration Tests
        run: |
          docker-compose -f docker-compose.test.yml up --abort-on-container-exit
          docker-compose -f docker-compose.test.yml down

  # Job 5: Security and Compliance Scanning
  security-compliance:
    runs-on: ubuntu-latest
    name: Security & Compliance
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./docker/*/Dockerfile

  # Job 6: Release Management
  release:
    runs-on: ubuntu-latest
    name: Create Release Package
    if: github.event_name == 'release'
    needs: [code-quality, container-build, hardware-simulation]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Release Archive
        run: |
          mkdir -p release-package
          cp -r scripts/ release-package/
          cp -r configs/ release-package/
          cp -r docs/ release-package/
          cp README.md release-package/
          tar -czf travel-router-nas-${{ github.event.release.tag_name }}.tar.gz release-package/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./travel-router-nas-${{ github.event.release.tag_name }}.tar.gz
          asset_name: travel-router-nas-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

---

# .github/workflows/hardware-test.yml - Hardware-specific testing
name: Hardware Testing Pipeline

on:
  workflow_dispatch:
    inputs:
      hardware_type:
        description: 'Hardware platform to test'
        required: true
        default: 'zimaboard'
        type: choice
        options:
        - zimaboard
        - raspberry-pi
        - generic-x86

jobs:
  hardware-specific-tests:
    runs-on: ubuntu-latest
    name: Test Hardware Configuration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Hardware-Specific Tests
        run: |
          python -m pytest tests/hardware/${{ github.event.inputs.hardware_type }}/ -v

      - name: Generate Hardware Compatibility Report
        run: |
          python scripts/generate_compatibility_report.py \
            --hardware ${{ github.event.inputs.hardware_type }} \
            --output hardware-compatibility-${{ github.event.inputs.hardware_type }}.json

      - name: Upload Hardware Test Results
        uses: actions/upload-artifact@v3
        with:
          name: hardware-test-results-${{ github.event.inputs.hardware_type }}
          path: |
            hardware-compatibility-*.json
            test-results/

---

# .github/dependabot.yml - Automated dependency updates
version: 2
updates:
  # Python dependencies
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 10

  # Docker dependencies
  - package-ecosystem: "docker"
    directory: "/docker"
    schedule:
      interval: "weekly"

  # GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"

---

# .github/ISSUE_TEMPLATE/bug_report.yml
name: Bug Report
description: File a bug report to help us improve
title: "[BUG] "
labels: ["bug", "triage"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!

  - type: input
    id: hardware
    attributes:
      label: Hardware Configuration
      description: What hardware are you using?
      placeholder: "ZimaBoard 832, GL.iNet Beryl AX, 2x 2TB SSDs"
    validations:
      required: true

  - type: dropdown
    id: software-version
    attributes:
      label: Software Version
      description: Which version are you running?
      options:
        - Latest (main branch)
        - v1.0.0
        - v0.9.0
        - Other (specify in description)
    validations:
      required: true

  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: A clear description of what the bug is
      placeholder: Tell us what you see!
    validations:
      required: true

  - type: textarea
    id: expected-behavior
    attributes:
      label: Expected Behavior
      description: What did you expect to happen?
    validations:
      required: true

  - type: textarea
    id: reproduction-steps
    attributes:
      label: Reproduction Steps
      description: Steps to reproduce the behavior
      placeholder: |
        1. Go to '...'
        2. Click on '....'
        3. Scroll down to '....'
        4. See error
    validations:
      required: true

  - type: textarea
    id: logs
    attributes:
      label: Relevant Log Output
      description: Please copy and paste any relevant log output
      render: shell

---

# .github/ISSUE_TEMPLATE/feature_request.yml
name: Feature Request
description: Suggest an idea for this project
title: "[FEATURE] "
labels: ["enhancement", "triage"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for suggesting a new feature!

  - type: textarea
    id: problem
    attributes:
      label: Problem Description
      description: Is your feature request related to a problem?
      placeholder: I'm always frustrated when...

  - type: textarea
    id: solution
    attributes:
      label: Proposed Solution
      description: What would you like to happen?
    validations:
      required: true

  - type: textarea
    id: alternatives
    attributes:
      label: Alternatives Considered
      description: Any alternative solutions or features you've considered?

  - type: dropdown
    id: priority
    attributes:
      label: Priority Level
      options:
        - Low
        - Medium  
        - High
        - Critical

---

# Repository Configuration Files

# .gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
configs/local/
logs/
*.log
secrets/
.env
hardware-test-results/
coverage.xml
htmlcov/

# Docker
docker-compose.override.yml

---

# requirements.txt - Python dependencies
ansible>=7.0.0
docker>=6.0.0
pytest>=7.0.0
pytest-cov>=4.0.0
black>=23.0.0
isort>=5.12.0
flake8>=6.0.0
pylint>=2.17.0
bandit>=1.7.0
safety>=2.3.0
pyyaml>=6.0
jinja2>=3.1.0
requests>=2.28.0
paramiko>=3.0.0

---

# requirements-dev.txt - Development dependencies
-r requirements.txt
pre-commit>=3.0.0
mkdocs>=1.4.0
mkdocs-material>=9.0.0
sphinx>=6.0.0
tox>=4.0.0

---

# docker-compose.test.yml - Testing environment
version: '3.8'

services:
  casaos-test:
    build:
      context: ./docker/casaos
      dockerfile: Dockerfile.test
    environment:
      - ENV=test
    volumes:
      - ./tests:/app/tests
      - ./configs:/app/configs
    command: pytest /app/tests/integration/

  network-test:
    build:
      context: ./docker/network-test
    environment:
      - TEST_MODE=true
    depends_on:
      - casaos-test

  plex-test:
    image: plexinc/pms-docker:latest
    environment:
      - PLEX_CLAIM=test-claim
      - ADVERTISE_IP=http://127.0.0.1:32400/
    volumes:
      - ./test-media:/data/media

---

# scripts/setup.sh - Initial setup script
#!/bin/bash
set -e

echo "🚀 Setting up Travel Router & NAS development environment..."

# Check for required tools
command -v docker >/dev/null 2>&1 || { echo "❌ Docker is required but not installed. Aborting." >&2; exit 1; }
command -v python3 >/dev/null 2>&1 || { echo "❌ Python 3 is required but not installed. Aborting." >&2; exit 1; }

# Create virtual environment
echo "📦 Creating Python virtual environment..."
python3 -m venv venv
source venv/bin/activate

# Install dependencies
echo "📥 Installing Python dependencies..."
pip install --upgrade pip
pip install -r requirements-dev.txt

# Setup pre-commit hooks
echo "🔧 Setting up pre-commit hooks..."
pre-commit install

# Create necessary directories
echo "📁 Creating project directories..."
mkdir -p {configs/local,logs,test-results,hardware-test-results}

# Copy example configurations
echo "⚙️  Setting up example configurations..."
cp configs/examples/* configs/local/ 2>/dev/null || true

# Build test containers
echo "🐳 Building test containers..."
docker-compose -f docker-compose.test.yml build

echo "✅ Setup complete! You can now:"
echo "   - Run tests: pytest"
echo "   - Start development: docker-compose up"
echo "   - Check code style: black . && isort ."
echo "   - Run security scan: bandit -r ."

---

# Makefile - Common development tasks
.PHONY: help setup test lint format security docker-build docker-test clean

help:
	@echo "Available commands:"
	@echo "  setup        Initialize development environment"
	@echo "  test         Run all tests"
	@echo "  lint         Run code linting"
	@echo "  format       Format code with black and isort"
	@echo "  security     Run security scans"
	@echo "  docker-build Build all Docker images"
	@echo "  docker-test  Run Docker-based tests"
	@echo "  clean        Clean up generated files"

setup:
	./scripts/setup.sh

test:
	pytest --cov=. --cov-report=html --cov-report=term

lint:
	flake8 .
	pylint **/*.py --exit-zero

format:
	black .
	isort .

security:
	bandit -r .
	safety check

docker-build:
	docker-compose -f docker-compose.test.yml build

docker-test:
	docker-compose -f docker-compose.test.yml up --abort-on-container-exit
	docker-compose -f docker-compose.test.yml down

clean:
	rm -rf __pycache__ .pytest_cache htmlcov/ .coverage
	docker system prune -f

---

# Contributing Guidelines and Repository Structure

# CONTRIBUTING.md
# Contributing to Travel Router & NAS Project

Thank you for your interest in contributing! This document provides guidelines for contributing to the project.

## Development Setup

1. **Fork and Clone**
   ```bash
   git clone https://github.com/yourusername/travel-router-nas.git
   cd travel-router-nas
   ```

2. **Setup Development Environment**
   ```bash
   make setup
   source venv/bin/activate
   ```

3. **Run Tests**
   ```bash
   make test
   ```

## Code Standards

- **Python**: Follow PEP 8, use Black for formatting
- **Shell Scripts**: Follow Google Shell Style Guide
- **Documentation**: Use Markdown, keep it concise and clear
- **Commit Messages**: Use conventional commits format

## Testing Requirements

- All new features must include tests
- Maintain test coverage above 80%
- Integration tests for hardware configurations
- Performance tests for critical paths

## Pull Request Process

1. Create feature branch from `develop`
2. Make changes with appropriate tests
3. Ensure all CI checks pass
4. Update documentation as needed
5. Submit PR with clear description

## Hardware Testing

We welcome testing on different hardware configurations:
- ZimaBoard variants
- Raspberry Pi 4/5
- Generic x86 mini PCs
- Different router models

Submit hardware compatibility reports via issues.

---

# Project Directory Structure

travel-router-nas/
├── .github/
│   ├── workflows/
│   │   ├── main.yml
│   │   └── hardware-test.yml
│   ├── ISSUE_TEMPLATE/
│   │   ├── bug_report.yml
│   │   └── feature_request.yml
│   └── dependabot.yml
├── configs/
│   ├── examples/
│   │   ├── casaos.yml
│   │   ├── network.yml
│   │   └── services.yml
│   └── templates/
│       ├── plex.yml
│       └── syncthing.yml
├── docker/
│   ├── casaos/
│   │   ├── Dockerfile
│   │   └── Dockerfile.test
│   └── setup-scripts/
│       └── Dockerfile
├── docs/
│   ├── setup-guide.md
│   ├── troubleshooting.md
│   └── hardware-compatibility.md
├── scripts/
│   ├── setup.sh
│   ├── deploy.sh
│   └── backup.sh
├── tests/
│   ├── unit/
│   ├── integration/
│   └── hardware/
│       ├── zimaboard/
│       └── raspberry-pi/
├── ansible/
│   ├── playbooks/
│   └── roles/
├── requirements.txt
├── requirements-dev.txt
├── docker-compose.yml
├── docker-compose.test.yml
├── Makefile
├── README.md
├── CONTRIBUTING.md
└── LICENSE